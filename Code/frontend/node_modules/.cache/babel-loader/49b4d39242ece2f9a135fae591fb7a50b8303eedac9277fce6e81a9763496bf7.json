{"ast":null,"code":"export default {\n  data() {\n    return {\n      book_id: \"\",\n      book_name: \"\",\n      book_content: \"\",\n      authors: \"\",\n      book_link: \"\",\n      section_id: \"\"\n    };\n  },\n  mounted() {\n    this.loadBookDetails();\n  },\n  methods: {\n    async loadBookDetails() {\n      const bookId = this.$route.params.id;\n      const token = localStorage.getItem(\"access_token\");\n      if (!token) {\n        console.error(\"Access token is null\");\n        return;\n      }\n      try {\n        const response = await this.fetchBookDetails(bookId, token);\n        const data = await response.json();\n        this.setBookData(data.book);\n      } catch (error) {\n        console.error(`Error fetching book details for ID ${bookId}:`, error);\n      }\n    },\n    async fetchBookDetails(bookId, token) {\n      const response = await fetch(`http://127.0.0.1:5000/book/${bookId}`, {\n        method: 'GET',\n        headers: {\n          \"Authorization\": `Bearer ${token}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response;\n    },\n    setBookData(book) {\n      this.book_id = book.id;\n      this.book_name = book.name;\n      this.book_content = book.content;\n      this.authors = book.authors;\n      this.book_link = book.book_link;\n      this.section_id = book.section_id;\n    },\n    async updateBook() {\n      const bookId = this.$route.params.id;\n      const token = localStorage.getItem('access_token');\n      if (!token) {\n        console.error(\"Access token is null\");\n        return;\n      }\n      try {\n        await this.performUpdateBook(bookId, token);\n        this.$router.push({\n          name: \"view-section-books\",\n          params: {\n            id: this.section_id\n          }\n        });\n      } catch (error) {\n        console.error(`Error updating book with ID ${bookId}:`, error);\n      }\n    },\n    async performUpdateBook(bookId, token) {\n      const response = await fetch(`http://127.0.0.1:5000/book/${bookId}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: this.book_name,\n          content: this.book_content,\n          authors: this.authors,\n          book_link: this.book_link,\n          section_id: this.section_id\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response;\n    }\n  }\n};","map":{"version":3,"names":["data","book_id","book_name","book_content","authors","book_link","section_id","mounted","loadBookDetails","methods","bookId","$route","params","id","token","localStorage","getItem","console","error","response","fetchBookDetails","json","setBookData","book","fetch","method","headers","ok","Error","status","name","content","updateBook","performUpdateBook","$router","push","body","JSON","stringify"],"sources":["C:\\Users\\rchan\\Downloads\\MAD2_proj\\23f1002266\\Code\\frontend\\src\\views\\UpdateBookpage.vue"],"sourcesContent":["<template>\r\n  <div class=\"update-book\">\r\n    <NavBar />\r\n    <div class=\"container mt-5\">\r\n      <h2>Update Book</h2>\r\n      <form @submit.prevent=\"updateBook\" class=\"mt-4\">\r\n        <div class=\"form-group row\">\r\n          <label for=\"book_name\" class=\"col-sm-2 col-form-label\">Book Name</label>\r\n          <div class=\"col-sm-10\">\r\n            <input v-model=\"book_name\" type=\"text\" class=\"form-control\" id=\"book_name\" placeholder=\"Enter book name\" required />\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <label for=\"book_content\" class=\"col-sm-2 col-form-label\">Content</label>\r\n          <div class=\"col-sm-10\">\r\n            <input v-model=\"book_content\" type=\"text\" class=\"form-control\" id=\"book_content\" placeholder=\"Enter book content\" required />\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <label for=\"authors\" class=\"col-sm-2 col-form-label\">Authors (comma separated)</label>\r\n          <div class=\"col-sm-10\">\r\n            <input v-model=\"authors\" type=\"text\" class=\"form-control\" id=\"authors\" placeholder=\"Enter authors\" required />\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <label for=\"book_link\" class=\"col-sm-2 col-form-label\">Book Link</label>\r\n          <div class=\"col-sm-10\">\r\n            <input v-model=\"book_link\" type=\"text\" class=\"form-control\" id=\"book_link\" placeholder=\"Enter book link\" required />\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <div class=\"col-sm-10\">\r\n            <button type=\"submit\" class=\"btn btn-primary\">Update Book</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      book_id: \"\",\r\n      book_name: \"\",\r\n      book_content: \"\",\r\n      authors: \"\",\r\n      book_link: \"\",\r\n      section_id: \"\",\r\n    };\r\n  },\r\n  mounted() {\r\n    this.loadBookDetails();\r\n  },\r\n  methods: {\r\n    async loadBookDetails() {\r\n      const bookId = this.$route.params.id;\r\n      const token = localStorage.getItem(\"access_token\");\r\n\r\n      if (!token) {\r\n        console.error(\"Access token is null\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await this.fetchBookDetails(bookId, token);\r\n        const data = await response.json();\r\n        this.setBookData(data.book);\r\n      } catch (error) {\r\n        console.error(`Error fetching book details for ID ${bookId}:`, error);\r\n      }\r\n    },\r\n    async fetchBookDetails(bookId, token) {\r\n      const response = await fetch(`http://127.0.0.1:5000/book/${bookId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          \"Authorization\": `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      return response;\r\n    },\r\n    setBookData(book) {\r\n      this.book_id = book.id;\r\n      this.book_name = book.name;\r\n      this.book_content = book.content;\r\n      this.authors = book.authors;\r\n      this.book_link = book.book_link;\r\n      this.section_id = book.section_id;\r\n    },\r\n    async updateBook() {\r\n      const bookId = this.$route.params.id;\r\n      const token = localStorage.getItem('access_token');\r\n\r\n      if (!token) {\r\n        console.error(\"Access token is null\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        await this.performUpdateBook(bookId, token);\r\n        this.$router.push({ name: \"view-section-books\", params: { id: this.section_id } });\r\n      } catch (error) {\r\n        console.error(`Error updating book with ID ${bookId}:`, error);\r\n      }\r\n    },\r\n    async performUpdateBook(bookId, token) {\r\n      const response = await fetch(`http://127.0.0.1:5000/book/${bookId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          name: this.book_name,\r\n          content: this.book_content,\r\n          authors: this.authors,\r\n          book_link: this.book_link,\r\n          section_id: this.section_id,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      return response;\r\n    },\r\n  },\r\n};\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.update-book {\r\n  font-family: 'Roboto', sans-serif;\r\n  background-color: #f7fafc;\r\n  min-height: 100vh;\r\n  padding: 2rem;\r\n}\r\n\r\nh2 {\r\n  font-size: 1.75rem;\r\n  color: #2d3748;\r\n  font-weight: 700;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.col-form-label {\r\n  font-weight: 600;\r\n}\r\n\r\n.form-control {\r\n  border-radius: 0.375rem;\r\n  border-color: #d2d6dc;\r\n}\r\n\r\n.btn-primary {\r\n  background-color: #3182ce;\r\n  border-color: #3182ce;\r\n  color: #ffffff;\r\n}\r\n\r\n.btn-primary:hover {\r\n  background-color: #2b6cb0;\r\n  border-color: #2b6cb0;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .form-control {\r\n    font-size: 0.875rem;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}