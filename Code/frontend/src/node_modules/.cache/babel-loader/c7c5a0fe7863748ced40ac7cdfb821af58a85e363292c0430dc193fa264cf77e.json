{"ast":null,"code":"export default {\n  data() {\n    return {\n      section_name: \"\",\n      section_content: \"\"\n    };\n  },\n  mounted() {\n    const sectionId = this.$route.params.id;\n    this.getSectionDetails(sectionId);\n  },\n  methods: {\n    getSectionDetails(sectionId) {\n      const token = localStorage.getItem(\"access_token\");\n      if (!token) {\n        console.error(\"Access token is null\");\n        return;\n      }\n      fetch(`http://127.0.0.1:5000/section/${sectionId}`, {\n        method: 'GET',\n        headers: {\n          \"Authorization\": \"Bearer \" + token,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      }).then(data => {\n        this.section_name = data.section.name;\n        this.section_content = data.section.content;\n      }).catch(error => {\n        console.error(`Error fetching section details for ID ${sectionId}:`, error);\n      });\n    },\n    updateSection() {\n      const sectionId = this.$route.params.id;\n      fetch(`http://127.0.0.1:5000/section/${sectionId}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': 'Bearer ' + localStorage.getItem('access_token'),\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: this.section_name,\n          content: this.section_content\n        })\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        console.log(`Section with ID ${sectionId} updated successfully`);\n        this.$router.push('/view-sections');\n      }).catch(error => {\n        console.error(`Error updating section with ID ${sectionId}:`, error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","section_name","section_content","mounted","sectionId","$route","params","id","getSectionDetails","methods","token","localStorage","getItem","console","error","fetch","method","headers","then","response","ok","Error","status","json","section","name","content","catch","updateSection","body","JSON","stringify","log","$router","push"],"sources":["C:\\Users\\rchan\\Desktop\\uplagarize\\Code\\frontend\\src\\views\\SectionUpdate.vue"],"sourcesContent":["<template>\r\n  <div class=\"update-section\">\r\n    <NavBar />\r\n    <div class=\"container mt-5\">\r\n      <h2>Update Section</h2>\r\n      <form @submit.prevent=\"updateSection\" class=\"mt-3\">\r\n        <div class=\"form-group row\">\r\n          <label for=\"section_name\" class=\"col-sm-2 form-label\">Section Name</label>\r\n          <div class=\"col-sm-10\">\r\n            <input v-model=\"section_name\" type=\"text\" class=\"form-control\" id=\"section_name\" placeholder=\"Enter section name\" required>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <label for=\"section_content\" class=\"col-sm-2 form-label\">Section Description</label>\r\n          <div class=\"col-sm-10\">\r\n            <input v-model=\"section_content\" type=\"text\" class=\"form-control\" id=\"section_content\" placeholder=\"Enter section description\" required>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <div class=\"col-sm-10\">\r\n            <button type=\"submit\" class=\"btn btn-primary\">Update Section</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      section_name: \"\",\r\n      section_content: \"\",\r\n    };\r\n  },\r\n  mounted() {\r\n    const sectionId = this.$route.params.id;\r\n    this.getSectionDetails(sectionId);\r\n  },\r\n  methods: {\r\n    getSectionDetails(sectionId) {\r\n      const token = localStorage.getItem(\"access_token\");\r\n      if (!token) {\r\n        console.error(\"Access token is null\");\r\n        return;\r\n      }\r\n\r\n      fetch(`http://127.0.0.1:5000/section/${sectionId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          \"Authorization\": \"Bearer \" + token,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      })\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n          }\r\n          return response.json();\r\n        })\r\n        .then(data => {\r\n          this.section_name = data.section.name;\r\n          this.section_content = data.section.content;\r\n        })\r\n        .catch(error => {\r\n          console.error(`Error fetching section details for ID ${sectionId}:`, error);\r\n        });\r\n    },\r\n    updateSection() {\r\n      const sectionId = this.$route.params.id;\r\n      fetch(`http://127.0.0.1:5000/section/${sectionId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Authorization': 'Bearer ' + localStorage.getItem('access_token'),\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          name: this.section_name,\r\n          content: this.section_content\r\n        }),\r\n      })\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n          }\r\n          console.log(`Section with ID ${sectionId} updated successfully`);\r\n          this.$router.push('/view-sections');\r\n        })\r\n        .catch(error => {\r\n          console.error(`Error updating section with ID ${sectionId}:`, error);\r\n        });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.update-section {\r\n  font-family: 'Roboto', sans-serif;\r\n  background-color: #f7fafc;\r\n  min-height: 100vh;\r\n  padding: 2rem;\r\n}\r\n\r\nh2 {\r\n  font-size: 1.75rem;\r\n  color: #2d3748;\r\n  font-weight: 700;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.form-label {\r\n  font-weight: 500;\r\n  color: #2d3748;\r\n}\r\n\r\n.form-control {\r\n  border-radius: 0.375rem;\r\n  border: 1px solid #ced4da;\r\n}\r\n\r\n.btn-primary {\r\n  background-color: #3182ce;\r\n  border-color: #3182ce;\r\n}\r\n\r\n.btn-primary:hover {\r\n  background-color: #2b6cb0;\r\n  border-color: #2b6cb0;\r\n}\r\n</style>\r\n"],"mappings":"AA6BA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,EAAE;MAChBC,eAAe,EAAE;IACnB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,MAAMC,SAAQ,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;IACvC,IAAI,CAACC,iBAAiB,CAACJ,SAAS,CAAC;EACnC,CAAC;EACDK,OAAO,EAAE;IACPD,iBAAiBA,CAACJ,SAAS,EAAE;MAC3B,MAAMM,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MAClD,IAAI,CAACF,KAAK,EAAE;QACVG,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAC;QACrC;MACF;MAEAC,KAAK,CAAC,iCAAiCX,SAAS,EAAE,EAAE;QAClDY,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,eAAe,EAAE,SAAQ,GAAIP,KAAK;UAClC,cAAc,EAAE;QAClB;MACF,CAAC,EACEQ,IAAI,CAACC,QAAO,IAAK;QAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBF,QAAQ,CAACG,MAAM,EAAE,CAAC;QAC3D;QACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;MACxB,CAAC,EACAL,IAAI,CAAClB,IAAG,IAAK;QACZ,IAAI,CAACC,YAAW,GAAID,IAAI,CAACwB,OAAO,CAACC,IAAI;QACrC,IAAI,CAACvB,eAAc,GAAIF,IAAI,CAACwB,OAAO,CAACE,OAAO;MAC7C,CAAC,EACAC,KAAK,CAACb,KAAI,IAAK;QACdD,OAAO,CAACC,KAAK,CAAC,yCAAyCV,SAAS,GAAG,EAAEU,KAAK,CAAC;MAC7E,CAAC,CAAC;IACN,CAAC;IACDc,aAAaA,CAAA,EAAG;MACd,MAAMxB,SAAQ,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;MACvCQ,KAAK,CAAC,iCAAiCX,SAAS,EAAE,EAAE;QAClDY,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,eAAe,EAAE,SAAQ,GAAIN,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;UACjE,cAAc,EAAE;QAClB,CAAC;QACDiB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBN,IAAI,EAAE,IAAI,CAACxB,YAAY;UACvByB,OAAO,EAAE,IAAI,CAACxB;QAChB,CAAC;MACH,CAAC,EACEgB,IAAI,CAACC,QAAO,IAAK;QAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBF,QAAQ,CAACG,MAAM,EAAE,CAAC;QAC3D;QACAT,OAAO,CAACmB,GAAG,CAAC,mBAAmB5B,SAAS,uBAAuB,CAAC;QAChE,IAAI,CAAC6B,OAAO,CAACC,IAAI,CAAC,gBAAgB,CAAC;MACrC,CAAC,EACAP,KAAK,CAACb,KAAI,IAAK;QACdD,OAAO,CAACC,KAAK,CAAC,kCAAkCV,SAAS,GAAG,EAAEU,KAAK,CAAC;MACtE,CAAC,CAAC;IACN;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}