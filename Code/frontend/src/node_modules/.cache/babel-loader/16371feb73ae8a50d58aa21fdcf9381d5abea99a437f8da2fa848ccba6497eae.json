{"ast":null,"code":"export default {\n  data() {\n    return {\n      book_id: \"\",\n      book_name: \"\",\n      book_content: \"\",\n      authors: \"\",\n      book_link: \"\",\n      section_id: \"\"\n    };\n  },\n  mounted() {\n    const bookId = this.$route.params.id;\n    this.getBookDetails(bookId);\n  },\n  methods: {\n    getBookDetails(bookId) {\n      const token = localStorage.getItem(\"access_token\");\n      if (!token) {\n        console.error(\"Access token is null\");\n        return;\n      }\n      fetch(`http://127.0.0.1:5000/book/${bookId}`, {\n        method: 'GET',\n        headers: {\n          \"Authorization\": \"Bearer \" + token,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      }).then(data => {\n        this.book_id = data.book.id;\n        this.book_name = data.book.name;\n        this.book_content = data.book.content;\n        this.authors = data.book.authors;\n        this.book_link = data.book.book_link;\n        this.section_id = data.book.section_id;\n      }).catch(error => {\n        console.error(`Error fetching book details for ID ${this.book_id}:`, error);\n      });\n    },\n    updateBook() {\n      const bookId = this.$route.params.id;\n      const sectionId = this.section_id;\n      fetch(`http://127.0.0.1:5000/book/${bookId}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': 'Bearer ' + localStorage.getItem('access_token'),\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: this.book_name,\n          content: this.book_content,\n          authors: this.authors,\n          book_link: this.book_link,\n          section_id: this.section_id\n        })\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        this.$router.push({\n          name: \"view-section-books\",\n          params: {\n            id: sectionId\n          }\n        });\n      }).catch(error => {\n        console.error(`Error updating book with ID ${bookId}:`, error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","book_id","book_name","book_content","authors","book_link","section_id","mounted","bookId","$route","params","id","getBookDetails","methods","token","localStorage","getItem","console","error","fetch","method","headers","then","response","ok","Error","status","json","book","name","content","catch","updateBook","sectionId","body","JSON","stringify","$router","push"],"sources":["C:\\Users\\rchan\\Desktop\\uplagarize\\Code\\frontend\\src\\views\\UpdateBookpage.vue"],"sourcesContent":["<template>\r\n  <div class=\"update-book\">\r\n    <NavBar />\r\n    <div class=\"container mt-5\">\r\n      <h2>Update Book</h2>\r\n      <form @submit.prevent=\"updateBook\" class=\"mt-4\">\r\n        <div class=\"form-group row\">\r\n          <label for=\"book_name\" class=\"col-sm-2 col-form-label\">Book Name</label>\r\n          <div class=\"col-sm-10\">\r\n            <input v-model=\"book_name\" type=\"text\" class=\"form-control\" id=\"book_name\" placeholder=\"Enter book name\" required />\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <label for=\"book_content\" class=\"col-sm-2 col-form-label\">Content</label>\r\n          <div class=\"col-sm-10\">\r\n            <input v-model=\"book_content\" type=\"text\" class=\"form-control\" id=\"book_content\" placeholder=\"Enter book content\" required />\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <label for=\"authors\" class=\"col-sm-2 col-form-label\">Authors (comma separated)</label>\r\n          <div class=\"col-sm-10\">\r\n            <input v-model=\"authors\" type=\"text\" class=\"form-control\" id=\"authors\" placeholder=\"Enter authors\" required />\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <label for=\"book_link\" class=\"col-sm-2 col-form-label\">Book Link</label>\r\n          <div class=\"col-sm-10\">\r\n            <input v-model=\"book_link\" type=\"text\" class=\"form-control\" id=\"book_link\" placeholder=\"Enter book link\" required />\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <div class=\"col-sm-10\">\r\n            <button type=\"submit\" class=\"btn btn-primary\">Update Book</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      book_id: \"\",\r\n      book_name: \"\",\r\n      book_content: \"\",\r\n      authors: \"\",\r\n      book_link: \"\",\r\n      section_id: \"\",\r\n    };\r\n  },\r\n  mounted() {\r\n    const bookId = this.$route.params.id;\r\n    this.getBookDetails(bookId);\r\n  },\r\n  methods: {\r\n    getBookDetails(bookId) {\r\n      const token = localStorage.getItem(\"access_token\");\r\n\r\n      if (!token) {\r\n        console.error(\"Access token is null\");\r\n        return;\r\n      }\r\n\r\n      fetch(`http://127.0.0.1:5000/book/${bookId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          \"Authorization\": \"Bearer \" + token,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      })\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n          }\r\n          return response.json();\r\n        })\r\n        .then(data => {\r\n          this.book_id = data.book.id;\r\n          this.book_name = data.book.name;\r\n          this.book_content = data.book.content;\r\n          this.authors = data.book.authors;\r\n          this.book_link = data.book.book_link;\r\n          this.section_id = data.book.section_id;\r\n        })\r\n        .catch(error => {\r\n          console.error(`Error fetching book details for ID ${this.book_id}:`, error);\r\n        });\r\n    },\r\n    updateBook() {\r\n      const bookId = this.$route.params.id;\r\n      const sectionId = this.section_id;\r\n\r\n      fetch(`http://127.0.0.1:5000/book/${bookId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Authorization': 'Bearer ' + localStorage.getItem('access_token'),\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          name: this.book_name,\r\n          content: this.book_content,\r\n          authors: this.authors,\r\n          book_link: this.book_link,\r\n          section_id: this.section_id,\r\n        }),\r\n      })\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n          }\r\n          this.$router.push({ name: \"view-section-books\", params: { id: sectionId } });\r\n        })\r\n        .catch(error => {\r\n          console.error(`Error updating book with ID ${bookId}:`, error);\r\n        });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.update-book {\r\n  font-family: 'Roboto', sans-serif;\r\n  background-color: #f7fafc;\r\n  min-height: 100vh;\r\n  padding: 2rem;\r\n}\r\n\r\nh2 {\r\n  font-size: 1.75rem;\r\n  color: #2d3748;\r\n  font-weight: 700;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.col-form-label {\r\n  font-weight: 600;\r\n}\r\n\r\n.form-control {\r\n  border-radius: 0.375rem;\r\n  border-color: #d2d6dc;\r\n}\r\n\r\n.btn-primary {\r\n  background-color: #3182ce;\r\n  border-color: #3182ce;\r\n  color: #ffffff;\r\n}\r\n\r\n.btn-primary:hover {\r\n  background-color: #2b6cb0;\r\n  border-color: #2b6cb0;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .form-control {\r\n    font-size: 0.875rem;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}