{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-3fa1a4ce\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.startExport && $options.startExport(...args))\n  }, \"Start Export\"), $data.taskStatus ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"p\", null, \"Task Status: \" + _toDisplayString($data.taskStatus), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["id","key","_createElementBlock","_hoisted_1","_createElementVNode","onClick","_cache","args","$options","startExport","$data","taskStatus","_hoisted_2","_toDisplayString","_createCommentVNode"],"sources":["C:\\Users\\rchan\\Desktop\\uplagarize\\Code\\frontend\\src\\views\\ExportExcel.vue"],"sourcesContent":["<template>\r\n    <div id=\"app\">\r\n      <button @click=\"startExport\">Start Export</button>\r\n      <div v-if=\"taskStatus\">\r\n        <p>Task Status: {{ taskStatus }}</p>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        taskId: null,\r\n        taskStatus: null,\r\n      };\r\n    },\r\n    methods: {\r\n      async startExport() {\r\n        try {\r\n          const response = await fetch('/start_export');\r\n          const data = await response.json();\r\n          this.taskId = data.task_id;\r\n          this.checkTaskStatus();\r\n        } catch (error) {\r\n          console.error(\"Error starting export:\", error);\r\n        }\r\n      },\r\n      async checkTaskStatus() {\r\n        if (!this.taskId) return;\r\n  \r\n        try {\r\n          const response = await fetch(`/start_export/${this.taskId}`);\r\n          const data = await response.json();\r\n          this.taskStatus = data.status;\r\n  \r\n          if (this.taskStatus !== \"Completed\") {\r\n            setTimeout(this.checkTaskStatus, 2000); // Poll every 2 seconds\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error checking task status:\", error);\r\n        }\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  #app {\r\n    text-align: center;\r\n    margin-top: 50px;\r\n  }\r\n  \r\n  button {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n  }\r\n  </style>\r\n  "],"mappings":";;;EACSA,EAAE,EAAC;AAAK;;EADjBC,GAAA;AAAA;;uBACIC,mBAAA,CAKM,OALNC,UAKM,GAJJC,mBAAA,CAAkD;IAAzCC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;KAAE,cAAY,GAC9BG,KAAA,CAAAC,UAAU,I,cAArBT,mBAAA,CAEM,OALZU,UAAA,GAIQR,mBAAA,CAAoC,WAAjC,eAAa,GAAAS,gBAAA,CAAGH,KAAA,CAAAC,UAAU,iB,KAJrCG,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}